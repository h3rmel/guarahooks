---
description: Development guidelines and standards for the guarahooks project
---

# Development Guidelines

## New Components

1. Determine the correct category (`ui/`, `layout/`, `sections/`, etc.)
2. Use kebab-case for file naming
3. Implement with TypeScript
4. Client components need the `"use client"` directive

## New Hooks

1. **Project hooks**: `hooks/use-name.tsx`
2. **Library hooks**: `registry/hooks/use-name.ts`
3. **Library hooks** must be registered in `registry/registry-hooks.ts`
4. Create examples for **Library hooks** in `registry/example/`

## New Documentation

1. Create MDX file in `content/docs/`
2. Update navigation in `config/docs.ts`
3. Use available MDX components

## New Utilities

1. **General**: `lib/utils.ts`
2. **Specific**: dedicated file in `lib/`
3. **Types**: `types/` for TypeScript definitions

## Code Standards

### File Structure

- Use kebab-case for file names (e.g: `use-mounted.tsx`)
- Use PascalCase for React components
- Hooks must have `use-` prefix

### TypeScript

- Always use TypeScript
- Define types in `types/` when appropriate
- Use interfaces for component props

### React

- Components that need interactivity must use `"use client"`
- Prefer Server Components when possible
- Use custom hooks for reusable logic

### Organization

- Components in appropriate categories
- Project hooks vs library hooks
- Utilities organized by functionality
