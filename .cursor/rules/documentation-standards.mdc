
# Documentation Standards

This document defines standards for creating consistent and high-quality documentation for hooks in guarahooks.

## üìã Required Structure

### Frontmatter

```yaml
---
title: useHookName            # Hook name in camelCase
date: YYYY-MM-DD             # Creation date
description: "Concise hook description"  # One-line descriptive text
author: h3rmel               # Hook author
published: true              # Publication status
---
```

### Required Sections

#### 1. Hook Preview

```jsx
<HookPreview name="use-hook-name-demo" />
```

#### 2. Installation

```jsx
<Tabs defaultValue="cli">
<TabsList>
  <TabsTrigger value="cli">CLI</TabsTrigger>
  <TabsTrigger value="manual">Manual</TabsTrigger>
</TabsList>

<TabsContent value="cli">
```bash
npx shadcn@latest add "https://guarahooks.com/r/use-hook-name"
```

</TabsContent>

<TabsContent value="manual">
<Steps>
<Step>Copy and paste the following code into your project.</Step>

<HookSource name="use-hook-name" />

<Step>Update the import paths to match your project setup.</Step>
</Steps>
</TabsContent>
</Tabs>

```

#### 3. API Reference

**Props/Parameters:**
```jsx
| Prop           | Type                | Default | Description                    |
| -------------- | ------------------- | ------- | ------------------------------ |
| `paramName`    | `ParamType`         | `value` | Clear parameter description    |
```

**Options (if applicable):**

```jsx
| Prop           | Type                | Default | Description                    |
| -------------- | ------------------- | ------- | ------------------------------ |
| `optionName`   | `OptionType`        | `value` | Option description             |
```

**Return:**

```jsx
| Property       | Type                | Description                    |
| -------------- | ------------------- | ------------------------------ |
| `propertyName` | `PropertyType`      | Property description           |
```

#### 4. Key Features

- List of main features
- Compatibility (SSR, Cross-tab, etc.)
- Important limitations

#### 5. Examples

- **Basic Usage**: Minimal functional example
- **Advanced Usage**: Examples with complex options
- **Specific Cases**: Particular use case scenarios

## üéØ Writing Guidelines

### Tone and Style

- **Concise and direct**: Explain functionalities without verbosity
- **Technical but accessible**: Use precise terms but explain when necessary
- **Consistent**: Maintain uniform terminology throughout documentation

### Code Examples

- **Functional**: All examples should compile and execute
- **Progressive**: From simple to complex
- **Contextualized**: Show real usage, not just syntax

### Descriptions

- **Props**: Describe the purpose, not just the type
- **Features**: Explain benefits and use cases
- **Limitations**: Be transparent about restrictions

## üìö Optional Sections

### For Complex Hooks

#### Usage Section

```jsx
<Steps>
<Step>Configure provider (if needed)</Step>

```tsx
// Configuration code
```

<Step>Use the hook in components</Step>

```tsx
// Usage code
```

</Steps>
```

#### Key Features & Details

- Cross-browser compatibility
- Performance considerations  
- Error handling
- Best practices & caveats

#### Advanced Examples

- Specific scenarios
- Integrations with other libraries
- Advanced usage patterns

### For Hooks with Provider

#### Provider Configuration

```jsx
### ProviderName Props

| Prop           | Type                | Default | Description                    |
| -------------- | ------------------- | ------- | ------------------------------ |
| `config`       | `ConfigType`        | `{}`    | Provider configuration         |
```

## üîç Quality Checklist

### Content

- [ ] Complete and correct frontmatter
- [ ] Clear and concise description
- [ ] Functional HookPreview
- [ ] Installation with CLI and manual
- [ ] Complete API tables
- [ ] Functional and progressive examples
- [ ] Key features listed

### Formatting

- [ ] Valid Markdown
- [ ] Correct MDX components
- [ ] Well-formatted tables
- [ ] Code with syntax highlighting
- [ ] Functional links

### Quality

- [ ] Accurate technical information
- [ ] Tested examples
- [ ] Complete feature coverage
- [ ] Clearly explained use cases

## üé® Available MDX Components

### Essential

- `<HookPreview>`: Interactive hook demonstration
- `<HookSource>`: Hook source code
- `<Tabs>`, `<TabsList>`, `<TabsTrigger>`, `<TabsContent>`: Tab navigation
- `<Steps>`, `<Step>`: Step-by-step instructions

### Informational

- `<Callout>`: Highlight important information
- `<Alert>`: Warnings and alerts
- `<Badge>`: Tags and labels

## üìñ Reference Examples

### Simple Hooks

- [use-toggle.mdx](mdc:content/docs/hooks/use-toggle.mdx)
- [use-previous.mdx](mdc:content/docs/hooks/use-previous.mdx)

### Complex Hooks  

- [use-local-storage.mdx](mdc:content/docs/hooks/use-local-storage.mdx)
- [use-fetch.mdx](mdc:content/docs/hooks/use-fetch.mdx)

### Hooks with Provider

- [use-fetch.mdx](mdc:content/docs/hooks/use-fetch.mdx)
- [use-notifications.mdx](mdc:content/docs/hooks/use-notifications.mdx)

Following these standards ensures consistent, professional, and useful documentation for all guarahooks users.
