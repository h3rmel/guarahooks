---
description: Complete guide for creating hooks in the guarahooks project
---
# Creating Hooks in guarahooks

This guide provides the complete process for creating new hooks following the project patterns.

## üöÄ Creation Flow

### 1. Planning
- [ ] Define the hook's purpose and functionality
- [ ] Choose an appropriate category
- [ ] Check if similar hook already exists
- [ ] Define the API (parameters and return)

### 2. Implementation
- [ ] Create hook in `registry/hooks/`
- [ ] Create example in `registry/example/`
- [ ] Create documentation in `content/docs/hooks/`

### 3. Registration
- [ ] Register in `registry/registry-hooks.ts`
- [ ] Register example in `registry/registry-examples.ts`
- [ ] Add to navigation in `config/docs.ts`

### 4. Verification
- [ ] Run `pnpm build:registry`
- [ ] Run `pnpm build:docs`
- [ ] Test locally

## üìÅ File Structure

### Main Hook
**Location**: `registry/hooks/use-{name}.ts`

```typescript
"use client";

import { useCallback, useEffect, useState } from "react";

// Types
interface UseHookOptions {
  // Hook options
}

interface UseHookReturn {
  // Hook return
}

/**
 * Hook description
 * @param options - Hook configuration
 * @returns Object with properties and methods
 */
export function useHook(options: UseHookOptions = {}): UseHookReturn {
  // Implementation here
  
  return {
    // Return object
  };
}
```

### Usage Example
**Location**: `registry/example/use-{name}-demo.tsx`

```typescript
"use client";

import React from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useHook } from "@/hooks/guarahooks/use-hook";

export default function UseHookDemo() {
  const { /* destructure return */ } = useHook();

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle>Hook Demo</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Demo content */}
      </CardContent>
    </Card>
  );
}
```

### Documentation
**Location**: `content/docs/hooks/use-{name}.mdx`

````markdown
---
title: useHook
date: YYYY-MM-DD
description: Concise hook description
author: h3rmel
published: true
---

<HookPreview name="use-{name}-demo" />

## Installation

<Tabs defaultValue="cli">
<TabsList>
  <TabsTrigger value="cli">CLI</TabsTrigger>
  <TabsTrigger value="manual">Manual</TabsTrigger>
</TabsList>

<TabsContent value="cli">
```bash
npx guarahooks@latest add use-{name}
```
</TabsContent>

<TabsContent value="manual">
<Steps>
<Step>Copy and paste the code below into your project.</Step>

<HookSource name="use-{name}" />

<Step>Update import paths according to your structure.</Step>
</Steps>
</TabsContent>
</Tabs>

## Basic Usage

```tsx
import { useHook } from "@/hooks/guarahooks/use-hook";

function Component() {
  const { /* return properties */ } = useHook();
  
  return (
    // Component JSX
  );
}
```

## API

### Parameters

| Parameter | Type | Default | Description |
|-----------|------|---------|-------------|
| `param` | `Type` | `default` | Parameter description |

### Return

| Property | Type | Description |
|----------|------|-------------|
| `property` | `Type` | Property description |

## Examples

### Advanced Usage

```tsx
// More complex example
```

## Features

- ‚úÖ SSR Support
- ‚úÖ TypeScript
- ‚úÖ Performance optimized
- ‚úÖ React 18+ compatible

## Related

- [Related Hook](/docs/hooks/use-related)
````

## üè∑Ô∏è Available Categories

| Category | Description | Examples |
|----------|-------------|----------|
| `state-management` | State management | `use-local-storage`, `use-toggle` |
| `ui-and-dom` | UI and DOM manipulation | `use-window-size`, `use-keypress` |
| `utilities` | General utilities | `use-copy-to-clipboard`, `use-geolocation` |
| `lifecycle` | Lifecycle | `use-on-mount`, `use-did-update` |
| `data-fetching` | Requests and network | `use-fetch`, `use-axios` |

## üìù Code Standards

### Naming Conventions
- **Hook**: `use-{name}` in kebab-case
- **File**: `use-{name}.ts` 
- **Function**: `useName` in camelCase
- **Demo**: `use-{name}-demo.tsx`

### Hook Structure
```typescript
// 1. Imports
"use client";
import { useCallback, useEffect, useState } from "react";

// 2. Types
interface Options {}
interface Return {}

// 3. Hook function with JSDoc
/**
 * Description
 */
export function useHook(): Return {
  // 4. State
  const [state, setState] = useState();
  
  // 5. Effects
  useEffect(() => {}, []);
  
  // 6. Callbacks
  const callback = useCallback(() => {}, []);
  
  // 7. Return
  return { state, callback };
}
```

### Best Practices
- ‚úÖ Use `"use client"` when necessary
- ‚úÖ Document with JSDoc
- ‚úÖ Use TypeScript rigorously
- ‚úÖ Optimize with `useCallback` and `useMemo`
- ‚úÖ Implement cleanup in `useEffect`
- ‚úÖ Handle edge cases
- ‚úÖ Maintain consistent API

## üìã Hook Registration

### Hook Registry
**File**: `registry/registry-hooks.ts`

```typescript
{
  name: 'use-hook',
  type: 'registry:hook',
  title: 'UseHook',
  description: 'Hook description',
  files: [{
    path: 'registry/hooks/use-hook.ts',
    type: 'registry:hook',
    target: 'hooks/guarahooks/use-hook.ts',
  }],
  categories: ['utilities'],
}
```

### Example Registry  
**File**: `registry/registry-examples.ts`

```typescript
{
  name: 'use-hook-demo',
  type: 'registry:example',
  title: 'UseHookDemo',
  description: 'use-hook demonstration.',
  registryDependencies: [
    'https://guarahooks.com/r/use-hook.json',
  ],
  files: [{
    path: 'registry/example/use-hook-demo.tsx',
    type: 'registry:example',
    target: 'components/example/use-hook-demo.tsx',
  }],
}
```

### Documentation Navigation
**File**: `config/docs.ts`

```typescript
// Add to appropriate category
{
  title: 'use-hook',
  href: '/docs/hooks/use-hook',
}
```

## üîÑ Build and Tests

### Build Commands
```bash
# Registry build
pnpm build:registry

# Documentation build  
pnpm build:docs

# Development
pnpm dev
```

### Verifications
- [ ] Hook works correctly
- [ ] Example renders without errors
- [ ] Documentation is accessible
- [ ] TypeScript types are correct
- [ ] Build runs without errors

## üìñ References

### Example Hooks
- **Simple**: [use-mounted.ts](mdc:registry/hooks/use-mounted.ts)
- **With State**: [use-toggle.ts](mdc:registry/hooks/use-toggle.ts)  
- **With Effects**: [use-local-storage.ts](mdc:registry/hooks/use-local-storage.ts)

### Example Demos
- [use-mounted-demo.tsx](mdc:registry/example/use-mounted-demo.tsx)
- [use-toggle-demo.tsx](mdc:registry/example/use-toggle-demo.tsx)

This guide ensures consistency and quality in hook creation for the guarahooks project.
