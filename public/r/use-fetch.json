{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-fetch",
  "type": "registry:hook",
  "title": "UseFetch",
  "description": "Abstracts the Fetch API with loading, error, and data state management.",
  "files": [
    {
      "path": "registry/hooks/use-fetch.tsx",
      "content": "'use client';\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\nexport interface UseFetchOptions extends RequestInit {}\n\nexport interface UseFetchResult<T> {\n  data: T | null;\n  error: Error | null;\n  loading: boolean;\n  refetch: () => void;\n  abort: () => void;\n  aborted: boolean;\n}\n\nexport function useFetch<T = unknown>(\n  url: string,\n  options?: UseFetchOptions,\n): UseFetchResult<T> {\n  const [data, setData] = useState<T | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [aborted, setAborted] = useState<boolean>(false);\n\n  const abortController = useRef<AbortController | null>(null);\n  const isMounted = useRef(true);\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n      abortController.current?.abort();\n    };\n  }, []);\n\n  const fetchData = useCallback(async () => {\n    abortController.current?.abort();\n    const controller = new AbortController();\n    abortController.current = controller;\n\n    const signal = controller.signal;\n\n    setLoading(true);\n    setError(null);\n    setAborted(false);\n\n    try {\n      const response = await fetch(url, { ...options, signal });\n\n      if (!response.ok) {\n        throw new Error(`Request failed with status ${response.status}`);\n      }\n\n      const json = (await response.json()) as T;\n\n      if (isMounted.current) {\n        setData(json);\n      }\n\n      return json;\n    } catch (err) {\n      if (err instanceof DOMException && err.name === 'AbortError') {\n        setAborted(true);\n      } else if (isMounted.current) {\n        setError(err as Error);\n        setData(null);\n      }\n      return null;\n    } finally {\n      if (isMounted.current) {\n        setLoading(false);\n      }\n    }\n  }, [url, JSON.stringify(options)]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  const refetch = useCallback(() => {\n    fetchData();\n  }, [fetchData]);\n\n  const abort = useCallback(() => {\n    abortController.current?.abort();\n    setAborted(true);\n  }, []);\n\n  return { data, error, loading, refetch, abort, aborted };\n}\n",
      "type": "registry:hook",
      "target": "hooks/guarahooks/use-fetch.tsx"
    }
  ],
  "categories": ["utilities"]
}
