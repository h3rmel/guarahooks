{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-debounce",
  "type": "registry:hook",
  "title": "UseDebounce",
  "description": "Debounces a function.",
  "files": [
    {
      "path": "registry/hooks/use-debounce.tsx",
      "content": "'use client';\n\nimport { useCallback, useEffect, useRef } from 'react';\n\nexport function useDebounce<T extends (...args: any[]) => void>(\n  callback: T,\n  delay: number,\n): (...args: Parameters<T>) => void {\n  const callbackRef = useRef<T>(callback);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  const debouncedFn = useCallback(\n    (...args: Parameters<T>) => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      timeoutRef.current = setTimeout(() => {\n        callbackRef.current(...args);\n      }, delay);\n    },\n    [delay],\n  );\n\n  // Clear the timeout when the component unmounts\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  return debouncedFn;\n}\n",
      "type": "registry:hook",
      "target": "hooks/guarahooks/use-debounce.tsx"
    }
  ],
  "categories": ["state-management"]
}
