{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-axios",
  "type": "registry:hook",
  "title": "UseAxios",
  "description": "A customizable hook for making HTTP requests with Axios",
  "files": [
    {
      "path": "registry/hooks/use-axios.tsx",
      "content": "'use client';\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\nimport axios, {\n  AxiosError,\n  AxiosInstance,\n  AxiosRequestConfig,\n  AxiosResponse,\n} from 'axios';\n\n// Types\nexport interface UseAxiosProps {\n  baseURL?: string;\n  headers?: Record<string, string>;\n  timeout?: number;\n  config?: AxiosRequestConfig;\n}\n\nexport interface UseAxiosReturn {\n  instance: AxiosInstance;\n  loading: boolean;\n  error: AxiosError | null;\n  data: unknown;\n  get: <T = unknown>(\n    url: string,\n    config?: AxiosRequestConfig,\n  ) => Promise<AxiosResponse<T>>;\n  post: <T = unknown>(\n    url: string,\n    data?: unknown,\n    config?: AxiosRequestConfig,\n  ) => Promise<AxiosResponse<T>>;\n  put: <T = unknown>(\n    url: string,\n    data?: unknown,\n    config?: AxiosRequestConfig,\n  ) => Promise<AxiosResponse<T>>;\n  delete: <T = unknown>(\n    url: string,\n    config?: AxiosRequestConfig,\n  ) => Promise<AxiosResponse<T>>;\n  patch: <T = unknown>(\n    url: string,\n    data?: unknown,\n    config?: AxiosRequestConfig,\n  ) => Promise<AxiosResponse<T>>;\n  resetError: () => void;\n}\n\nexport function useAxios({\n  baseURL = '',\n  headers = {},\n  timeout = 10000,\n  config = {},\n}: UseAxiosProps = {}): UseAxiosReturn {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<AxiosError | null>(null);\n  const [data, setData] = useState<unknown>(null);\n\n  // Create a ref to store the axios instance to prevent recreation on each render\n  const instanceRef = useRef<AxiosInstance | null>(null);\n\n  // Initialize axios instance\n  useEffect(() => {\n    instanceRef.current = axios.create({\n      baseURL,\n      headers,\n      timeout,\n      ...config,\n    });\n\n    return () => {\n      instanceRef.current = null;\n    };\n  }, [baseURL, timeout, config]);\n\n  // Get the current instance\n  const getInstance = useCallback((): AxiosInstance => {\n    if (!instanceRef.current) {\n      instanceRef.current = axios.create({\n        baseURL,\n        headers,\n        timeout,\n        ...config,\n      });\n    }\n    return instanceRef.current;\n  }, [baseURL, headers, timeout, config]);\n\n  // Helper to handle request execution\n  const executeRequest = useCallback(\n    async <T = unknown,>(\n      method: string,\n      url: string,\n      data?: unknown,\n      customConfig?: AxiosRequestConfig,\n    ): Promise<AxiosResponse<T>> => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const instance = getInstance();\n\n        const response = await instance.request<T>({\n          method,\n          url,\n          data,\n          ...customConfig,\n        });\n\n        setData(response.data);\n        return response;\n      } catch (err) {\n        const axiosError = err as AxiosError;\n        setError(axiosError);\n        throw axiosError;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [getInstance],\n  );\n\n  // Request methods\n  const get = useCallback(\n    <T = unknown,>(url: string, config?: AxiosRequestConfig) => {\n      return executeRequest<T>('get', url, undefined, config);\n    },\n    [executeRequest],\n  );\n\n  const post = useCallback(\n    <T = unknown,>(url: string, data?: unknown, config?: AxiosRequestConfig) => {\n      return executeRequest<T>('post', url, data, config);\n    },\n    [executeRequest],\n  );\n\n  const put = useCallback(\n    <T = unknown,>(url: string, data?: unknown, config?: AxiosRequestConfig) => {\n      return executeRequest<T>('put', url, data, config);\n    },\n    [executeRequest],\n  );\n\n  const del = useCallback(\n    <T = unknown,>(url: string, config?: AxiosRequestConfig) => {\n      return executeRequest<T>('delete', url, undefined, config);\n    },\n    [executeRequest],\n  );\n\n  const patch = useCallback(\n    <T = unknown,>(url: string, data?: unknown, config?: AxiosRequestConfig) => {\n      return executeRequest<T>('patch', url, data, config);\n    },\n    [executeRequest],\n  );\n\n  const resetError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return {\n    instance: getInstance(),\n    loading,\n    error,\n    data,\n    get,\n    post,\n    put,\n    delete: del,\n    patch,\n    resetError,\n  };\n}\n",
      "type": "registry:hook",
      "target": "hooks/guarahooks/use-axios.tsx"
    }
  ],
  "categories": ["utilities"]
}
