/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import * as React from 'react';

import type { RegistryItem } from '../components/hook-preview';

export const Index: Record<string, RegistryItem> = {
  'use-window-size': {
    name: 'use-window-size',
    description: "Tracks the current window's dimensions.",
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-window-size.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-window-size.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-window-size.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-previous': {
    name: 'use-previous',
    description: 'Tracks the previous value of a state.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-previous.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-previous.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-previous.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-media': {
    name: 'use-media',
    description: 'Checks if the current window matches a media query.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-media.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-media.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-media.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-mouse': {
    name: 'use-mouse',
    description: 'Tracks the mouse position in the element and document.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-mouse.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-mouse.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-mouse.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-keypress': {
    name: 'use-keypress',
    description: 'Tracks keyboard combinations and key presses.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-keypress.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-keypress.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-keypress.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-orientation': {
    name: 'use-orientation',
    description: 'Tracks the current orientation of the device.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-orientation.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-orientation.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-orientation.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-intersection-observer': {
    name: 'use-intersection-observer',
    description:
      'Observes when an element intersects the viewport or a root element.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-intersection-observer.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-intersection-observer.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/hooks/use-intersection-observer.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-toggle': {
    name: 'use-toggle',
    description: 'Controls a boolean state with a toggler.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-toggle.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-toggle.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-toggle.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-set': {
    name: 'use-set',
    description: 'Manages a Set of items with ease.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-set.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-set.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-set.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-map': {
    name: 'use-map',
    description: 'Manages a Map of key/value pairs with ease.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-map.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-map.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-map.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-local-storage': {
    name: 'use-local-storage',
    description: 'Synchronizes a value with localStorage.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-local-storage.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-local-storage.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-local-storage.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-session-storage': {
    name: 'use-session-storage',
    description: 'Synchronizes a value with sessionStorage.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-session-storage.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-session-storage.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-session-storage.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-cookie': {
    name: 'use-cookie',
    description: 'Synchronizes a value with cookies.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-cookie.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-cookie.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-cookie.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-copy-to-clipboard': {
    name: 'use-copy-to-clipboard',
    description: 'Copies text to the clipboard.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-copy-to-clipboard.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-copy-to-clipboard.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-copy-to-clipboard.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-debounce-callback': {
    name: 'use-debounce-callback',
    description: 'Debounce the call of a function.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-debounce-callback.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-debounce-callback.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-debounce-callback.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-debounce-state': {
    name: 'use-debounce-state',
    description: 'Debounce the state update.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-debounce-state.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-debounce-state.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-debounce-state.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-click-outside': {
    name: 'use-click-outside',
    description: 'Detects clicks outside of a referenced element.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-click-outside.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-click-outside.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-click-outside.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-on-mount': {
    name: 'use-on-mount',
    description: 'Executes a function only once when the component is mounted.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-on-mount.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-on-mount.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-on-mount.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-on-unmount': {
    name: 'use-on-unmount',
    description:
      'Executes a function only once when the component is unmounted.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-on-unmount.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-on-unmount.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-on-unmount.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-did-update': {
    name: 'use-did-update',
    description:
      'Executes a function when the component is updated, but not when it is mounted.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-did-update.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-did-update.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-did-update.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-os': {
    name: 'use-os',
    description: "Detects the user's operating system.",
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-os.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-os.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-os.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-idle': {
    name: 'use-idle',
    description: 'Detects if the user is idle.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-idle.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-idle.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-idle.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-is-touch-device': {
    name: 'use-is-touch-device',
    description:
      "Hook to detect if the user's device has touch screen functionality.",
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-is-touch-device.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-is-touch-device.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-is-touch-device.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-fullscreen': {
    name: 'use-fullscreen',
    description: 'Enters and exits fullscreen mode.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-fullscreen.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-fullscreen.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-fullscreen.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-confirm': {
    name: 'use-confirm',
    description: 'Manages a confirmation dialog.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-confirm.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-confirm.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-confirm.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-notifications': {
    name: 'use-notifications',
    description: 'Manages browser notifications.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-notifications.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-notifications.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-notifications.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-page-leave': {
    name: 'use-page-leave',
    description: 'Detects when the user tries to leave the page.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-page-leave.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-page-leave.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-page-leave.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-disclosure': {
    name: 'use-disclosure',
    description:
      'Manages boolean state for UI components like dialogs, modals, and popovers.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-disclosure.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-disclosure.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-disclosure.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-mutation-observer': {
    name: 'use-mutation-observer',
    description: 'Observes changes to the DOM using the Mutation Observer API',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-mutation-observer.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-mutation-observer.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-mutation-observer.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-resize-observer': {
    name: 'use-resize-observer',
    description:
      'Observes size changes of an element using the Resize Observer API',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-resize-observer.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-resize-observer.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-resize-observer.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-fetch': {
    name: 'use-fetch',
    description:
      'Abstracts the Fetch API with loading, error, and data state management.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-fetch.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-fetch.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-fetch.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-pagination': {
    name: 'use-pagination',
    description: 'Hook for controlling list pagination.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-pagination.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-pagination.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-pagination.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-event-listener': {
    name: 'use-event-listener',
    description: 'Manages DOM event listeners with proper cleanup.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-event-listener.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-event-listener.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-event-listener.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-axios': {
    name: 'use-axios',
    description: 'A customizable hook for making HTTP requests with Axios',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-axios.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-axios.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-axios.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-page-title': {
    name: 'use-page-title',
    description: 'Modifies the page title dynamically.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-page-title.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-page-title.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-page-title.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-interval': {
    name: 'use-interval',
    description: 'Runs a callback at specified intervals.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-interval.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-interval.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-interval.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-timeout': {
    name: 'use-timeout',
    description: 'Executes a callback after a specified delay.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-timeout.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-timeout.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-timeout.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-battery-status': {
    name: 'use-battery-status',
    description: 'Access system Battery Status via the Battery Status API.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-battery-status.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-battery-status.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-battery-status.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-geolocation': {
    name: 'use-geolocation',
    description: 'Declarative wrapper for the Geolocation API.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-geolocation.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-geolocation.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-geolocation.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-isomorphic-layout-effect': {
    name: 'use-isomorphic-layout-effect',
    description:
      'A hook that uses useLayoutEffect on the client and falls back to useEffect on the server to avoid SSR warnings.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-isomorphic-layout-effect.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-isomorphic-layout-effect.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/hooks/use-isomorphic-layout-effect.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-scroll-position': {
    name: 'use-scroll-position',
    description: 'Tracks the current scroll position of the page.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-scroll-position.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-scroll-position.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-scroll-position.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-scroll-lock': {
    name: 'use-scroll-lock',
    description: 'Lock and unlock scrolling on an element or the page',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-scroll-lock.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-scroll-lock.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-scroll-lock.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-abort-controller': {
    name: 'use-abort-controller',
    description:
      'Provides AbortController functionality for canceling asynchronous operations.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-abort-controller.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-abort-controller.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-abort-controller.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-next-auth': {
    name: 'use-next-auth',
    description: 'Enhanced wrapper for NextAuth.js session management.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-next-auth.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-next-auth.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-next-auth.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-react-hook-form': {
    name: 'use-react-hook-form',
    description: 'Custom wrapper for React Hook Form.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-react-hook-form.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-react-hook-form.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-react-hook-form.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-better-auth': {
    name: 'use-better-auth',
    description: 'Flexible authentication hook.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-better-auth.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-better-auth.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-better-auth.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-formik': {
    name: 'use-formik',
    description: 'Custom wrapper for Formik.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-formik.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-formik.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-formik.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-eye-dropper': {
    name: 'use-eye-dropper',
    description:
      'Pick colors from anywhere on the screen using the EyeDropper API.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-eye-dropper.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-eye-dropper.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-eye-dropper.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-ky': {
    name: 'use-ky',
    description: 'A customizable hook for making HTTP requests using Ky',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-ky.tsx',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-ky.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-ky.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-array-state': {
    name: 'use-array-state',
    description:
      'Manages an array as a React state with built-in array manipulation methods.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-array-state.ts',
        type: 'registry:hook',
        target: 'hooks/guarahooks/use-array-state.ts',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-array-state.ts');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-window-size-demo': {
    name: 'use-window-size-demo',
    description: "use-window-size's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'https://guarahooks.com/r/use-window-size.json',
    ],
    files: [
      {
        path: 'registry/example/use-window-size-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-window-size-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-window-size-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-previous-demo': {
    name: 'use-previous-demo',
    description: "use-previous's hook in action.",
    type: 'registry:example',
    registryDependencies: ['card', 'button'],
    files: [
      {
        path: 'registry/example/use-previous-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-previous-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-previous-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-media-demo': {
    name: 'use-media-demo',
    description: "use-media's hook in action.",
    type: 'registry:example',
    registryDependencies: ['card', 'https://guarahooks.com/r/use-media.json'],
    files: [
      {
        path: 'registry/example/use-media-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-media-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-media-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-mouse-demo': {
    name: 'use-mouse-demo',
    description: "use-mouse's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'checkbox',
      'card',
      'https://guarahooks.com/r/use-mouse.json',
    ],
    files: [
      {
        path: 'registry/example/use-mouse-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-mouse-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-mouse-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-click-outside-demo': {
    name: 'use-click-outside-demo',
    description: "use-click-outside's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'https://guarahooks.com/r/use-click-outside.json',
    ],
    files: [
      {
        path: 'registry/example/use-click-outside-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-click-outside-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-click-outside-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-keypress-demo': {
    name: 'use-keypress-demo',
    description: "use-keypress's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'https://guarahooks.com/r/use-keypress.json',
    ],
    files: [
      {
        path: 'registry/example/use-keypress-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-keypress-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-keypress-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-orientation-demo': {
    name: 'use-orientation-demo',
    description: "use-orientation's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'https://guarahooks.com/r/use-orientation.json',
    ],
    files: [
      {
        path: 'registry/example/use-orientation-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-orientation-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-orientation-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-toggle-demo': {
    name: 'use-toggle-demo',
    description: "use-toggle's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://guarahooks.com/r/use-toggle.json',
    ],
    files: [
      {
        path: 'registry/example/use-toggle-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-toggle-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-toggle-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-set-demo': {
    name: 'use-set-demo',
    description: "use-set's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'input',
      'https://guarahooks.com/r/use-set.json',
    ],
    files: [
      {
        path: 'registry/example/use-set-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-set-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-set-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-map-demo': {
    name: 'use-map-demo',
    description: "use-map's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'input',
      'https://guarahooks.com/r/use-map.json',
    ],
    files: [
      {
        path: 'registry/example/use-map-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-map-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-map-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-local-storage-demo': {
    name: 'use-local-storage-demo',
    description: "use-local-storage's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'input',
      'label',
      'https://guarahooks.com/r/use-local-storage.json',
    ],
    files: [
      {
        path: 'registry/example/use-local-storage-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-local-storage-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-local-storage-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-session-storage-demo': {
    name: 'use-session-storage-demo',
    description: "use-session-storage's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'input',
      'label',
      'https://guarahooks.com/r/use-session-storage.json',
    ],
    files: [
      {
        path: 'registry/example/use-session-storage-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-session-storage-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-session-storage-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-cookie-demo': {
    name: 'use-cookie-demo',
    description: "use-cookie's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'input',
      'button',
      'https://guarahooks.com/r/use-cookie.json',
    ],
    files: [
      {
        path: 'registry/example/use-cookie-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-cookie-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-cookie-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-copy-to-clipboard-demo': {
    name: 'use-copy-to-clipboard-demo',
    description: "use-copy-to-clipboard's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'input',
      'https://guarahooks.com/r/use-copy-to-clipboard.json',
    ],
    files: [
      {
        path: 'registry/example/use-copy-to-clipboard-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-copy-to-clipboard-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-copy-to-clipboard-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-debounce-callback-demo': {
    name: 'use-debounce-callback-demo',
    description: "use-debounce-callback's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'input',
      'https://guarahooks.com/r/use-debounce-callback.json',
    ],
    files: [
      {
        path: 'registry/example/use-debounce-callback-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-debounce-callback-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-debounce-callback-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-debounce-state-demo': {
    name: 'use-debounce-state-demo',
    description: "use-debounce-state's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'input',
      'https://guarahooks.com/r/use-debounce-state.json',
    ],
    files: [
      {
        path: 'registry/example/use-debounce-state-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-debounce-state-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-debounce-state-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-on-mount-demo': {
    name: 'use-on-mount-demo',
    description: "use-on-mount's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'https://guarahooks.com/r/use-on-mount.json',
    ],
    files: [
      {
        path: 'registry/example/use-on-mount-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-on-mount-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-on-mount-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-on-unmount-demo': {
    name: 'use-on-unmount-demo',
    description: "use-on-unmount's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'sonner',
      'https://guarahooks.com/r/use-on-unmount.json',
    ],
    files: [
      {
        path: 'registry/example/use-on-unmount-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-on-unmount-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-on-unmount-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-did-update-demo': {
    name: 'use-did-update-demo',
    description: "use-did-update's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://guarahooks.com/r/use-did-update.json',
    ],
    files: [
      {
        path: 'registry/example/use-did-update-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-did-update-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-did-update-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-os-demo': {
    name: 'use-os-demo',
    description: "use-os's hook in action.",
    type: 'registry:example',
    registryDependencies: ['card', 'https://guarahooks.com/r/use-os.json'],
    files: [
      {
        path: 'registry/example/use-os-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-os-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-os-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-idle-demo': {
    name: 'use-idle-demo',
    description: "use-idle's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'badge',
      'button',
      'https://guarahooks.com/r/use-idle.json',
    ],
    files: [
      {
        path: 'registry/example/use-idle-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-idle-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-idle-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-is-touch-device-demo': {
    name: 'use-is-touch-device-demo',
    description: "use-is-touch-device's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'badge',
      'https://guarahooks.com/r/use-is-touch-device.json',
    ],
    files: [
      {
        path: 'registry/example/use-is-touch-device-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-is-touch-device-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-is-touch-device-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-fullscreen-demo': {
    name: 'use-fullscreen-demo',
    description: "use-fullscreen's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://guarahooks.com/r/use-fullscreen.json',
    ],
    files: [
      {
        path: 'registry/example/use-fullscreen-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-fullscreen-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-fullscreen-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-confirm-demo': {
    name: 'use-confirm-demo',
    description: "use-confirm's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://guarahooks.com/r/use-confirm.json',
    ],
    files: [
      {
        path: 'registry/example/use-confirm-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-confirm-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-confirm-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-notifications-demo': {
    name: 'use-notifications-demo',
    description: "use-notifications's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'alert',
      'button',
      'badge',
      'lucide-react',
      'https://guarahooks.com/r/use-notifications.json',
    ],
    files: [
      {
        path: 'registry/example/use-notifications-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-notifications-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-notifications-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-page-leave-demo': {
    name: 'use-page-leave-demo',
    description: "use-page-leave's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'badge',
      'https://guarahooks.com/r/use-page-leave.json',
    ],
    files: [
      {
        path: 'registry/example/use-page-leave-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-page-leave-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-page-leave-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-disclosure-demo': {
    name: 'use-disclosure-demo',
    description: "use-disclosure's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'dialog',
      'https://guarahooks.com/r/use-disclosure.json',
    ],
    files: [
      {
        path: 'registry/example/use-disclosure-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-disclosure-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-disclosure-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-mutation-observer-demo': {
    name: 'use-mutation-observer-demo',
    description: "use-mutation-observer's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'button',
      'card',
      'https://guarahooks.com/r/use-mutation-observer.json',
    ],
    files: [
      {
        path: 'registry/example/use-mutation-observer-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-mutation-observer-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-mutation-observer-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-resize-observer-demo': {
    name: 'use-resize-observer-demo',
    description: "use-resize-observer's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'button',
      'card',
      'https://guarahooks.com/r/use-resize-observer.json',
    ],
    files: [
      {
        path: 'registry/example/use-resize-observer-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-resize-observer-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-resize-observer-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-intersection-observer-demo': {
    name: 'use-intersection-observer-demo',
    description: "use-intersection-observer's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://guarahooks.com/r/use-intersection-observer.json',
    ],
    files: [
      {
        path: 'registry/example/use-intersection-observer-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-intersection-observer-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-intersection-observer-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-fetch-demo': {
    name: 'use-fetch-demo',
    description: "use-fetch's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://guarahooks.com/r/use-fetch.json',
    ],
    files: [
      {
        path: 'registry/example/use-fetch-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-fetch-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-fetch-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-pagination-demo': {
    name: 'use-pagination-demo',
    description: "use-pagination's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://guarahooks.com/r/use-pagination.json',
    ],
    files: [
      {
        path: 'registry/example/use-pagination-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-pagination-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-pagination-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-event-listener-demo': {
    name: 'use-event-listener-demo',
    description: "use-event-listener's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'badge',
      'button',
      'https://guarahooks.com/r/use-event-listener.json',
    ],
    files: [
      {
        path: 'registry/example/use-event-listener-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-event-listener-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-event-listener-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-axios-demo': {
    name: 'use-axios-demo',
    description: "use-axios's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'input',
      'button',
      'label',
      'alert',
      'lucide-react',
      'https://guarahooks.com/r/use-axios.json',
    ],
    files: [
      {
        path: 'registry/example/use-axios-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-axios-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-axios-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-page-title-demo': {
    name: 'use-page-title-demo',
    description: "use-page-title's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'input',
      'label',
      'https://guarahooks.com/r/use-page-title.json',
    ],
    files: [
      {
        path: 'registry/example/use-page-title-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-page-title-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-page-title-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-interval-demo': {
    name: 'use-interval-demo',
    description: "use-interval's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://guarahooks.com/r/use-interval.json',
    ],
    files: [
      {
        path: 'registry/example/use-interval-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-interval-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-interval-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-timeout-demo': {
    name: 'use-timeout-demo',
    description: "use-timeout's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://guarahooks.com/r/use-timeout.json',
    ],
    files: [
      {
        path: 'registry/example/use-timeout-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-timeout-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-timeout-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-battery-status-demo': {
    name: 'use-battery-status-demo',
    description: "use-battery-status's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'badge',
      'https://guarahooks.com/r/use-battery-status.json',
    ],
    files: [
      {
        path: 'registry/example/use-battery-status-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-battery-status-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-battery-status-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-geolocation-demo': {
    name: 'use-geolocation-demo',
    description: "use-geolocation's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://guarahooks.com/r/use-geolocation.json',
    ],
    files: [
      {
        path: 'registry/example/use-geolocation-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-geolocation-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-geolocation-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-isomorphic-layout-effect-demo': {
    name: 'use-isomorphic-layout-effect-demo',
    description: "use-isomorphic-layout-effect's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://guarahooks.com/r/use-isomorphic-layout-effect.json',
    ],
    files: [
      {
        path: 'registry/example/use-isomorphic-layout-effect-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-isomorphic-layout-effect-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-isomorphic-layout-effect-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-scroll-position-demo': {
    name: 'use-scroll-position-demo',
    description: "use-scroll-position's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'https://guarahooks.com/r/use-scroll-position.json',
    ],
    files: [
      {
        path: 'registry/example/use-scroll-position-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-scroll-position-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-scroll-position-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-scroll-lock-demo': {
    name: 'use-scroll-lock-demo',
    description: 'Demonstrates useScrollLock hook',
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://guarahooks.com/r/use-scroll-lock.json',
    ],
    files: [
      {
        path: 'registry/example/use-scroll-lock-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-scroll-lock-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-scroll-lock-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-abort-controller-demo': {
    name: 'use-abort-controller-demo',
    description: "use-abort-controller's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'button',
      'card',
      'badge',
      'https://guarahooks.com/r/use-abort-controller.json',
    ],
    files: [
      {
        path: 'registry/example/use-abort-controller-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-abort-controller-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-abort-controller-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-react-hook-form-demo': {
    name: 'use-react-hook-form-demo',
    description: "use-react-hook-form's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'label',
      'input',
      'button',
      'https://guarahooks.com/r/use-react-hook-form.json',
    ],
    files: [
      {
        path: 'registry/example/use-react-hook-form-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-react-hook-form-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-react-hook-form-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-formik-demo': {
    name: 'use-formik-demo',
    description: "use-formik's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'label',
      'input',
      'button',
      'sonner',
      'https://guarahooks.com/r/use-formik.json',
    ],
    files: [
      {
        path: 'registry/example/use-formik-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-formik-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-formik-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-next-auth-demo': {
    name: 'use-next-auth-demo',
    description: "use-next-auth's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'badge',
      'sonner',
      'https://guarahooks.com/r/use-next-auth.json',
    ],
    files: [
      {
        path: 'registry/example/use-next-auth-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-next-auth-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-next-auth-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-better-auth-demo': {
    name: 'use-better-auth-demo',
    description: "use-better-auth's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'badge',
      'input',
      'label',
      'tabs',
      'sonner',
      'https://guarahooks.com/r/use-better-auth.json',
    ],
    files: [
      {
        path: 'registry/example/use-better-auth-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-better-auth-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-better-auth-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-eye-dropper-demo': {
    name: 'use-eye-dropper-demo',
    description: "use-eye-dropper's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://guarahooks.com/r/use-eye-dropper.json',
    ],
    files: [
      {
        path: 'registry/example/use-eye-dropper-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-eye-dropper-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-eye-dropper-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-ky-demo': {
    name: 'use-ky-demo',
    description: "use-ky's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'badge',
      'button',
      'input',
      'label',
      'tabs',
      'https://guarahooks.com/r/use-ky.json',
    ],
    files: [
      {
        path: 'registry/example/use-ky-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-ky-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-ky-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-array-state-demo': {
    name: 'use-array-state-demo',
    description: "use-array-state's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'button',
      'card',
      'input',
      'badge',
      'https://guarahooks.com/r/use-array-state.json',
    ],
    files: [
      {
        path: 'registry/example/use-array-state-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-array-state-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-array-state-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
};
